module Microsoft.CodeAnalysis {
    export class WellKnownMemberNames {
        public static EnumBackingFieldName: string = "value__";
        public static InstanceConstructorName: string = ".ctor";
        public static StaticConstructorName: string = ".cctor";
        public static Indexer: string = "this[]";
        public static DestructorName: string = "Finalize";
        public static DelegateInvokeName: string = "Invoke";
        public static DelegateBeginInvokeName: string = "BeginInvoke";
        public static DelegateEndInvokeName: string = "EndInvoke";
        public static EntryPointMethodName: string = "Main";
        public static DefaultScriptClassName: string = "Script";
        public static ObjectToString: string = "ToString";
        public static ObjectEquals: string = "Equals";
        public static ObjectGetHashCode: string = "GetHashCode";
        public static ImplicitConversionName: string = "op_Implicit";
        public static ExplicitConversionName: string = "op_Explicit";
        public static AdditionOperatorName: string = "op_Addition";
        public static BitwiseAndOperatorName: string = "op_BitwiseAnd";
        public static BitwiseOrOperatorName: string = "op_BitwiseOr";
        public static DecrementOperatorName: string = "op_Decrement";
        public static DivisionOperatorName: string = "op_Division";
        public static EqualityOperatorName: string = "op_Equality";
        public static ExclusiveOrOperatorName: string = "op_ExclusiveOr";
        public static FalseOperatorName: string = "op_False";
        public static GreaterThanOperatorName: string = "op_GreaterThan";
        public static GreaterThanOrEqualOperatorName: string = "op_GreaterThanOrEqual";
        public static IncrementOperatorName: string = "op_Increment";
        public static InequalityOperatorName: string = "op_Inequality";
        public static LeftShiftOperatorName: string = "op_LeftShift";
        public static UnsignedLeftShiftOperatorName: string = "op_UnsignedLeftShift";
        public static LessThanOperatorName: string = "op_LessThan";
        public static LessThanOrEqualOperatorName: string = "op_LessThanOrEqual";
        public static LogicalNotOperatorName: string = "op_LogicalNot";
        public static LogicalOrOperatorName: string = "op_LogicalOr";
        public static LogicalAndOperatorName: string = "op_LogicalAnd";
        public static ModulusOperatorName: string = "op_Modulus";
        public static MultiplyOperatorName: string = "op_Multiply";
        public static OnesComplementOperatorName: string = "op_OnesComplement";
        public static RightShiftOperatorName: string = "op_RightShift";
        public static UnsignedRightShiftOperatorName: string = "op_UnsignedRightShift";
        public static SubtractionOperatorName: string = "op_Subtraction";
        public static TrueOperatorName: string = "op_True";
        public static UnaryNegationOperatorName: string = "op_UnaryNegation";
        public static UnaryPlusOperatorName: string = "op_UnaryPlus";
        public static ConcatenateOperatorName: string = "op_Concatenate";
        public static ExponentOperatorName: string = "op_Exponent";
        public static IntegerDivisionOperatorName: string = "op_IntegerDivision";
        public static LikeOperatorName: string = "op_Like";
        public static GetEnumeratorMethodName: string = "GetEnumerator";
        public static MoveNextMethodName: string = "MoveNext";
        public static CurrentPropertyName: string = "Current";
        public static ValuePropertyName: string = "Value";
        public static CollectionInitializerAddMethodName: string = "Add";
        public static GetAwaiter: string = "GetAwaiter";
        public static IsCompleted: string = "IsCompleted";
        public static GetResult: string = "GetResult";
        public static OnCompleted: string = "OnCompleted";
    }
}