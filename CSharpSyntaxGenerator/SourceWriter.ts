module CSharpSyntaxGenerator {
    export class SourceWriterTypeScript extends AbstractFileWriter {
        ctor_3567(writer: System.IO.TextWriter, tree: Tree): SourceWriterTypeScript {
            super.ctor_4434(writer, tree);
            return this;
        }
        public static Write(writer: System.IO.TextWriter, tree: Tree): void {
            new SourceWriterTypeScript().ctor_3567(writer, tree).WriteFile();
        }
        private WriteFile(): void {
            this.WriteLine_5116("// <auto-generated />");
            this.WriteLine_1675();
            this.WriteLine_5116("using System;");
            this.WriteLine_5116("using System.Collections;");
            this.WriteLine_5116("using System.Collections.Generic;");
            this.WriteLine_5116("using System.Linq;");
            this.WriteLine_5116("using System.Threading;");
            this.WriteLine_5116("using Roslyn.Utilities;");
            this.WriteLine_1675();
            this.WriteLine_5116("namespace Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax");
            this.WriteLine_5116("{");
            this.WriteLine_1675();
            this.WriteGreenTypes();
            this.WriteGreenVisitors();
            this.WriteGreenRewriter();
            this.WriteContextualGreenFactories();
            this.WriteStaticGreenFactories();
            this.WriteLine_5116("}");
            this.WriteLine_1675();
            this.WriteLine_5116("namespace Microsoft.CodeAnalysis.CSharp.Syntax");
            this.WriteLine_5116("{");
            this.WriteLine_1675();
            this.WriteRedTypes();
            this.WriteLine_5116("}");
            this.WriteLine_1675();
            this.WriteLine_5116("namespace Microsoft.CodeAnalysis.CSharp");
            this.WriteLine_5116("{");
            this.WriteLine_5116("    using Microsoft.CodeAnalysis.CSharp.Syntax;");
            this.WriteLine_1675();
            this.WriteRedVisitors();
            this.WriteRedRewriter();
            this.WriteRedFactories();
            this.WriteLine_5116("}");
        }
        private WriteGreenTypes(): void {
            var nodes = System.Linq.Enumerable.ToList(System.Linq.Enumerable.Where(this.Tree.Types,
                n => !(n instanceof PredefinedNode)));
            for (var i: number = 0, n = nodes.Count; i < n; i++) {
                var node = nodes.$get$(i);
                this.WriteLine_1675();
                this.WriteGreenType(node);
            }
        }
        private WriteGreenType(node: TreeType): void {
            this.WriteComment_1861(node.TypeComment, "  ");
            if (node instanceof AbstractNode) {
                var nd: AbstractNode = <AbstractNode>node;
                this.WriteLine_1126("  internal abstract partial class {0} : {1}", node.Name, node.Base);
                this.WriteLine_5116("  {");
                this.WriteLine_1126("    internal {0}(SyntaxKind kind, DiagnosticInfo[] diagnostics, SyntaxAnnotation[] annotations)", node.Name);
                this.WriteLine_5116("      : base(kind, diagnostics, annotations)");
                this.WriteLine_5116("    {");
                if (node.Name == "DirectiveTriviaSyntax") {
                    this.WriteLine_5116("      this.flags |= NodeFlags.ContainsDirectives;");
                }
                this.WriteLine_5116("    }");
                this.WriteLine_1126("    internal {0}(SyntaxKind kind)", node.Name);
                this.WriteLine_5116("      : base(kind)");
                this.WriteLine_5116("    {");
                if (node.Name == "DirectiveTriviaSyntax") {
                    this.WriteLine_5116("      this.flags |= NodeFlags.ContainsDirectives;");
                }
                this.WriteLine_5116("    }");
                this.WriteLine_1675();
                this.WriteLine_1126("    protected {0}(ObjectReader reader)", node.Name);
                this.WriteLine_5116("       : base(reader)");
                this.WriteLine_5116("    {");
                if (node.Name == "DirectiveTriviaSyntax") {
                    this.WriteLine_5116("      this.flags |= NodeFlags.ContainsDirectives;");
                }
                this.WriteLine_5116("    }");
                var valueFields = System.Linq.Enumerable.ToList(System.Linq.Enumerable.Where(nd.Fields,
                    n => !this.IsNodeOrNodeList(n.Type)));
                var nodeFields = System.Linq.Enumerable.ToList(System.Linq.Enumerable.Where(nd.Fields,
                    n => this.IsNodeOrNodeList(n.Type)));
                for (var i: number = 0, n = nodeFields.Count; i < n; i++) {
                    var field = nodeFields.$get$(i);
                    if (this.IsNodeOrNodeList(field.Type)) {
                        this.WriteLine_1675();
                        this.WriteComment_1861(field.PropertyComment, "    ");
                        this.WriteLine_1126("    public abstract {0}{1} {2} {{ get; }}",(SourceWriter.IsNew(field) ? "new " : ""), field.Type, field.Name);
                    }
                }
                for (var i: number = 0, n = valueFields.Count; i < n; i++) {
                    var field = valueFields.$get$(i);
                    this.WriteLine_1675();
                    this.WriteComment_1861(field.PropertyComment, "    ");
                    this.WriteLine_1126("    public abstract {0}{1} {2} {{ get; }}",(SourceWriter.IsNew(field) ? "new " : ""), field.Type, field.Name);
                }
                this.WriteLine_5116("  }");
            }
            else if (node instanceof Node) {
                var ndC: Node = <Node>node;
                this.WriteLine_1126("  internal sealed partial class {0} : {1}", node.Name, node.Base);
                this.WriteLine_5116("  {");
                var valueFields = System.Linq.Enumerable.ToList(System.Linq.Enumerable.Where(ndC.Fields,
                    n => !this.IsNodeOrNodeList(n.Type)));
                var nodeFields = System.Linq.Enumerable.ToList(System.Linq.Enumerable.Where(ndC.Fields,
                    n => this.IsNodeOrNodeList(n.Type)));
                for (var i: number = 0, n = nodeFields.Count; i < n; i++) {
                    var field = nodeFields.$get$(i);
                    var type = SourceWriter.GetFieldType(field);
                    this.WriteLine_1126("    internal readonly {0} {1};", type, SourceWriter.CamelCase(field.Name));
                }
                for (var i: number = 0, n = valueFields.Count; i < n; i++) {
                    var field = valueFields.$get$(i);
                    this.WriteLine_1126("    internal readonly {0} {1};", field.Type, SourceWriter.CamelCase(field.Name));
                }
                this.WriteLine_1675();
                this.Write_1709("    internal {0}(SyntaxKind kind", node.Name);
                this.WriteGreenNodeConstructorArgs(nodeFields, valueFields);
                this.WriteLine_5116(", DiagnosticInfo[] diagnostics, SyntaxAnnotation[] annotations)");
                this.WriteLine_5116("        : base(kind, diagnostics, annotations)");
                this.WriteLine_5116("    {");
                this.WriteCtorBody(valueFields, nodeFields);
                this.WriteLine_5116("    }");
                this.WriteLine_1675();
                this.WriteLine_1675();
                this.Write_1709("    internal {0}(SyntaxKind kind", node.Name);
                this.WriteGreenNodeConstructorArgs(nodeFields, valueFields);
                this.WriteLine_5116(", SyntaxFactoryContext context)");
                this.WriteLine_5116("        : base(kind)");
                this.WriteLine_5116("    {");
                this.WriteLine_5116("        this.SetFactoryContext(context);");
                this.WriteCtorBody(valueFields, nodeFields);
                this.WriteLine_5116("    }");
                this.WriteLine_1675();
                this.WriteLine_1675();
                this.Write_1709("    internal {0}(SyntaxKind kind", node.Name);
                this.WriteGreenNodeConstructorArgs(nodeFields, valueFields);
                this.WriteLine_5116(")");
                this.WriteLine_5116("        : base(kind)");
                this.WriteLine_5116("    {");
                this.WriteCtorBody(valueFields, nodeFields);
                this.WriteLine_5116("    }");
                this.WriteLine_1675();
                for (var i: number = 0, n = nodeFields.Count; i < n; i++) {
                    var field = nodeFields.$get$(i);
                    this.WriteComment_1861(field.PropertyComment, "    ");
                    if (SourceWriter.IsNodeList(field.Type)) {
                        this.WriteLine_1126("    public {0}{1} {2} {{ get {{ return new {1}(this.{3}); }} }}",
                            SourceWriter.OverrideOrNewModifier(field), field.Type, field.Name, SourceWriter.CamelCase(field.Name));
                    }
                    else if (SourceWriter.IsSeparatedNodeList(field.Type)) {
                        this.WriteLine_1126("    public {0}{1} {2} {{ get {{ return new {1}(new SyntaxList<CSharpSyntaxNode>(this.{3})); }} }}",
                            SourceWriter.OverrideOrNewModifier(field), field.Type, field.Name, SourceWriter.CamelCase(field.Name), i);
                    }
                    else if (field.Type == "SyntaxNodeOrTokenList") {
                        this.WriteLine_1126("    public {0}SyntaxList<CSharpSyntaxNode> {1} {{ get {{ return new SyntaxList<CSharpSyntaxNode>(this.{2}); }} }}",
                            SourceWriter.OverrideOrNewModifier(field), field.Name, SourceWriter.CamelCase(field.Name));
                    }
                    else {
                        this.WriteLine_1126("    public {0}{1} {2} {{ get {{ return this.{3}; }} }}",
                            SourceWriter.OverrideOrNewModifier(field), field.Type, field.Name, SourceWriter.CamelCase(field.Name));
                    }
                }
                for (var i: number = 0, n = valueFields.Count; i < n; i++) {
                    var field = valueFields.$get$(i);
                    this.WriteComment_1861(field.PropertyComment, "    ");
                    this.WriteLine_1126("    public {0}{1} {2} {{ get {{ return this.{3}; }} }}",
                        SourceWriter.OverrideOrNewModifier(field), field.Type, field.Name, SourceWriter.CamelCase(field.Name));
                }
                this.WriteLine_1675();
                this.WriteLine_5116("    internal override GreenNode GetSlot(int index)");
                this.WriteLine_5116("    {");
                this.WriteLine_5116("        switch (index)");
                this.WriteLine_5116("        {");
                for (var i: number = 0, n = nodeFields.Count; i < n; i++) {
                    var field = nodeFields.$get$(i);
                    this.WriteLine_1126("            case {0}: return this.{1};", i, SourceWriter.CamelCase(field.Name));
                }
                this.WriteLine_5116("            default: return null;");
                this.WriteLine_5116("        }");
                this.WriteLine_5116("    }");
                this.WriteLine_1675();
                this.WriteLine_5116("    internal override SyntaxNode CreateRed(SyntaxNode parent, int position)");
                this.WriteLine_5116("    {");
                this.WriteLine_1126("      return new CSharp.Syntax.{0}(this, parent, position);", node.Name);
                this.WriteLine_5116("    }");
                this.WriteGreenAcceptMethods(ndC);
                this.WriteGreenUpdateMethod(ndC);
                this.WriteSetDiagnostics(ndC);
                this.WriteSetAnnotations(ndC);
                this.WriteGreenSerialization(ndC);
                this.WriteLine_5116("  }");
            }
        }
        private WriteGreenNodeConstructorArgs(nodeFields: System.Collections.Generic.List<Field>, valueFields: System.Collections.Generic.List<Field>): void {
            for (var i: number = 0, n = nodeFields.Count; i < n; i++) {
                var field = nodeFields.$get$(i);
                var type: string = SourceWriter.GetFieldType(field);
                this.Write_1709(", {0} {1}", type, SourceWriter.CamelCase(field.Name));
            }
            for (var i: number = 0, n = valueFields.Count; i < n; i++) {
                var field = valueFields.$get$(i);
                this.Write_1709(", {0} {1}", field.Type, SourceWriter.CamelCase(field.Name));
            }
        }
        private WriteGreenSerialization(node: Node): void {
            var valueFields = System.Linq.Enumerable.ToList(System.Linq.Enumerable.Where(node.Fields,
                n => !this.IsNodeOrNodeList(n.Type)));
            var nodeFields = System.Linq.Enumerable.ToList(System.Linq.Enumerable.Where(node.Fields,
                n => this.IsNodeOrNodeList(n.Type)));
            this.WriteLine_1675();
            this.WriteLine_1126("    internal {0}(ObjectReader reader)", node.Name);
            this.WriteLine_5116("        : base(reader)");
            this.WriteLine_5116("    {");
            this.WriteLine_1126("      this.SlotCount = {0};", nodeFields.Count);
            for (var i: number = 0, n = nodeFields.Count; i < n; i++) {
                var field = nodeFields.$get$(i);
                var type: string = SourceWriter.GetFieldType(field);
                this.WriteLine_1126("      var {0} = ({1})reader.ReadValue();", SourceWriter.CamelCase(field.Name), type);
                this.WriteLine_1126("      if ({0} != null)", SourceWriter.CamelCase(field.Name));
                this.WriteLine_5116("      {");
                this.WriteLine_1126("         AdjustFlagsAndWidth({0});", SourceWriter.CamelCase(field.Name));
                this.WriteLine_1126("         this.{0} = {0};", SourceWriter.CamelCase(field.Name), type);
                this.WriteLine_5116("      }");
            }
            for (var i: number = 0, n = valueFields.Count; i < n; i++) {
                var field = valueFields.$get$(i);
                var type: string = SourceWriter.GetFieldType(field);
                this.WriteLine_1126("      this.{0} = ({1})reader.{2}();", SourceWriter.CamelCase(field.Name), type, this.GetReaderMethod(type));
            }
            this.WriteLine_5116("    }");
            this.WriteLine_1675();
            this.WriteLine_5116("    internal override void WriteTo(ObjectWriter writer)");
            this.WriteLine_5116("    {");
            this.WriteLine_5116("      base.WriteTo(writer);");
            for (var i: number = 0, n = nodeFields.Count; i < n; i++) {
                var field = nodeFields.$get$(i);
                var type: string = SourceWriter.GetFieldType(field);
                this.WriteLine_1126("      writer.WriteValue(this.{0});", SourceWriter.CamelCase(field.Name));
            }
            for (var i: number = 0, n = valueFields.Count; i < n; i++) {
                var field = valueFields.$get$(i);
                var type = SourceWriter.GetFieldType(field);
                this.WriteLine_1126("      writer.{0}(this.{1});", this.GetWriterMethod(type), SourceWriter.CamelCase(field.Name));
            }
            this.WriteLine_5116("    }");
            this.WriteLine_1675();
            this.WriteLine_5116("    internal override Func<ObjectReader, object> GetReader()");
            this.WriteLine_5116("    {");
            this.WriteLine_1126("       return r => new {0}(r);", node.Name);
            this.WriteLine_5116("    }");
        }
        private GetWriterMethod(type: string): string {
            switch (type) {
                case "bool":
                    return "WriteBoolean";
                default:
                    throw new System.InvalidOperationException(System.String.Format("Type '{0}' not supported for object reader serialization.", type));
            }
        }
        private GetReaderMethod(type: string): string {
            switch (type) {
                case "bool":
                    return "ReadBoolean";
                default:
                    throw new System.InvalidOperationException(System.String.Format("Type '{0}' not supported for object reader serialization.", type));
            }
        }
        private WriteCtorBody(valueFields: System.Collections.Generic.List<Field>, nodeFields: System.Collections.Generic.List<Field>): void {
            this.WriteLine_1126("        this.SlotCount = {0};", nodeFields.Count);
            for (var i: number = 0, n = nodeFields.Count; i < n; i++) {
                var field = nodeFields.$get$(i);
                if (SourceWriter.IsAnyList(field.Type) || SourceWriter.IsOptional(field)) {
                    this.WriteLine_1126("        if ({0} != null)", SourceWriter.CamelCase(field.Name));
                    this.WriteLine_5116("        {");
                    this.WriteLine_1126("            this.AdjustFlagsAndWidth({0});", SourceWriter.CamelCase(field.Name));
                    this.WriteLine_1126("            this.{0} = {0};", SourceWriter.CamelCase(field.Name));
                    this.WriteLine_5116("        }");
                }
                else {
                    this.WriteLine_1126("        this.AdjustFlagsAndWidth({0});", SourceWriter.CamelCase(field.Name));
                    this.WriteLine_1126("        this.{0} = {0};", SourceWriter.CamelCase(field.Name));
                }
            }
            for (var i: number = 0, n = valueFields.Count; i < n; i++) {
                var field = valueFields.$get$(i);
                this.WriteLine_1126("        this.{0} = {0};", SourceWriter.CamelCase(field.Name));
            }
        }
        private WriteSetAnnotations(node: Node): void {
            this.WriteLine_1675();
            this.WriteLine_5116("    internal override GreenNode SetAnnotations(SyntaxAnnotation[] annotations)");
            this.WriteLine_5116("    {");
            this.Write_1709("         return new {0}(", node.Name);
            this.Write_1360("this.Kind, ");
            for (var f: number = 0; f < node.Fields.Count; f++) {
                var field = node.Fields.$get$(f);
                if (f > 0)
                    this.Write_1360(", ");
                this.Write_1709("this.{0}", SourceWriter.CamelCase(field.Name));
            }
            this.WriteLine_5116(", GetDiagnostics(), annotations);");
            this.WriteLine_5116("    }");
        }
        private WriteSetDiagnostics(node: Node): void {
            this.WriteLine_1675();
            this.WriteLine_5116("    internal override GreenNode SetDiagnostics(DiagnosticInfo[] diagnostics)");
            this.WriteLine_5116("    {");
            this.Write_1709("         return new {0}(", node.Name);
            this.Write_1360("this.Kind, ");
            for (var f: number = 0; f < node.Fields.Count; f++) {
                var field = node.Fields.$get$(f);
                if (f > 0)
                    this.Write_1360(", ");
                this.Write_1709("this.{0}", SourceWriter.CamelCase(field.Name));
            }
            this.WriteLine_5116(", diagnostics, GetAnnotations());");
            this.WriteLine_5116("    }");
        }
        private WriteGreenAcceptMethods(node: Node): void {
            this.WriteLine_1675();
            this.WriteLine_5116("    public override TResult Accept<TResult>(CSharpSyntaxVisitor<TResult> visitor)");
            this.WriteLine_5116("    {");
            this.WriteLine_1126("        return visitor.Visit{0}(this);", SourceWriter.StripPost(node.Name, "Syntax"));
            this.WriteLine_5116("    }");
            this.WriteLine_1675();
            this.WriteLine_5116("    public override void Accept(CSharpSyntaxVisitorBase visitor)");
            this.WriteLine_5116("    {");
            this.WriteLine_1126("        visitor.Visit{0}(this);", SourceWriter.StripPost(node.Name, "Syntax"));
            this.WriteLine_5116("    }");
        }
        private WriteGreenVisitors(): void {
            this.WriteGreenVisitor(false, true);
            this.WriteLine_1675();
            this.WriteGreenVisitor(false, false);
        }
        private WriteGreenVisitor(withArgument: boolean, withResult: boolean): void {
            var nodes = System.Linq.Enumerable.ToList(System.Linq.Enumerable.Where(this.Tree.Types,
                n => !(n instanceof PredefinedNode)));
            var typeArgs = 
            this.WriteLine_1675();
            this.WriteLine_5116("  internal partial class CSharpSyntaxVisitor" + (withResult ? "<" + (withArgument ? "TArgument, " : "") + "TResult>" : "Base"));
            this.WriteLine_5116("  {");
            var nWritten: number = 0;
            for (var i: number = 0, n = nodes.Count; i < n; i++) {
                var node = __as__<Node>(nodes.$get$(i), Node);
                if (node != null) {
                    if (nWritten > 0)
                        this.WriteLine_1675();
                    nWritten++;
                    this.WriteLine_1126("    public virtual " + (withResult ? "TResult" : "void") + " Visit{0}({1} node{2})", SourceWriter.StripPost(node.Name, "Syntax"), node.Name, withArgument ? ", TArgument argument" : "");
                    this.WriteLine_5116("    {");
                    this.WriteLine_1126("      " + (withResult ? "return " : "") + "this.DefaultVisit(node{0});", withArgument ? ", argument" : "");
                    this.WriteLine_5116("    }");
                }
            }
            this.WriteLine_5116("  }");
        }
        private WriteGreenUpdateMethod(node: Node): void {
            this.WriteLine_1675();
            this.Write_1709("    public {0} Update(", node.Name);
            for (var f: number = 0; f < node.Fields.Count; f++) {
                var field = node.Fields.$get$(f);
                if (f > 0)
                    this.Write_1360(", ");
                var type = field.Type == "SyntaxNodeOrTokenList" ? "SyntaxList<CSharpSyntaxNode>" : field.Type == "SyntaxTokenList" ? "SyntaxList<SyntaxToken>" : field.Type;
                this.Write_1709("{0} {1}", type, SourceWriter.CamelCase(field.Name));
            }
            this.WriteLine_5116(")");
            this.WriteLine_5116("    {");
            this.Write_1360("        if (");
            var nCompared: number = 0;
            for (var f: number = 0; f < node.Fields.Count; f++) {
                var field = node.Fields.$get$(f);
                if (this.IsDerivedOrListOfDerived("SyntaxNode", field.Type) || this.IsDerivedOrListOfDerived("SyntaxToken", field.Type) || field.Type == "SyntaxNodeOrTokenList") {
                    if (nCompared > 0)
                        this.Write_1360(" || ");
                    this.Write_1709("{0} != this.{1}", SourceWriter.CamelCase(field.Name), field.Name);
                    nCompared++;
                }
            }
            if (nCompared > 0) {
                this.WriteLine_5116(")");
                this.WriteLine_5116("        {");
                this.Write_1709("            var newNode = SyntaxFactory.{0}(", SourceWriter.StripPost(node.Name, "Syntax"));
                if (node.Kinds.Count > 1) {
                    this.Write_1360("this.Kind, ");
                }
                for (var f: number = 0; f < node.Fields.Count; f++) {
                    var field = node.Fields.$get$(f);
                    if (f > 0)
                        this.Write_1360(", ");
                    this.Write_1360(SourceWriter.CamelCase(field.Name));
                }
                this.WriteLine_5116(");");
                this.WriteLine_5116("            var diags = this.GetDiagnostics();");
                this.WriteLine_5116("            if (diags != null && diags.Length > 0)");
                this.WriteLine_5116("               newNode = newNode.WithDiagnosticsGreen(diags);");
                this.WriteLine_5116("            var annotations = this.GetAnnotations();");
                this.WriteLine_5116("            if (annotations != null && annotations.Length > 0)");
                this.WriteLine_5116("               newNode = newNode.WithAnnotationsGreen(annotations);");
                this.WriteLine_5116("            return newNode;");
                this.WriteLine_5116("        }");
            }
            this.WriteLine_1675();
            this.WriteLine_5116("        return this;");
            this.WriteLine_5116("    }");
        }
        private WriteGreenRewriter(): void {
            var nodes = System.Linq.Enumerable.ToList(System.Linq.Enumerable.Where(this.Tree.Types,
                n => !(n instanceof PredefinedNode)));
            this.WriteLine_1675();
            this.WriteLine_5116("  internal partial class CSharpSyntaxRewriter : CSharpSyntaxVisitor<CSharpSyntaxNode>");
            this.WriteLine_5116("  {");
            var nWritten: number = 0;
            for (var i: number = 0, n = nodes.Count; i < n; i++) {
                var node = __as__<Node>(nodes.$get$(i), Node);
                if (node != null) {
                    var nodeFields = System.Linq.Enumerable.ToList(System.Linq.Enumerable.Where(node.Fields,
                        nd => this.IsNodeOrNodeList(nd.Type)));
                    if (nWritten > 0)
                        this.WriteLine_1675();
                    nWritten++;
                    this.WriteLine_1126("    public override CSharpSyntaxNode Visit{0}({1} node)", SourceWriter.StripPost(node.Name, "Syntax"), node.Name);
                    this.WriteLine_5116("    {");
                    for (var f: number = 0; f < nodeFields.Count; f++) {
                        var field = nodeFields.$get$(f);
                        if (SourceWriter.IsAnyList(field.Type)) {
                            this.WriteLine_1126("      var {0} = this.VisitList(node.{1});", SourceWriter.CamelCase(field.Name), field.Name);
                        }
                        else {
                            this.WriteLine_1126("      var {0} = ({1})this.Visit(node.{2});", SourceWriter.CamelCase(field.Name), field.Type, field.Name);
                        }
                    }
                    if (nodeFields.Count > 0) {
                        this.Write_1360("      return node.Update(");
                        for (var f: number = 0; f < node.Fields.Count; f++) {
                            var field = node.Fields.$get$(f);
                            if (f > 0)
                                this.Write_1360(", ");
                            if (this.IsNodeOrNodeList(field.Type)) {
                                this.Write_1360(SourceWriter.CamelCase(field.Name));
                            }
                            else {
                                this.Write_1709("node.{0}", field.Name);
                            }
                        }
                        this.WriteLine_5116(");");
                    }
                    else {
                        this.WriteLine_5116("      return node;");
                    }
                    this.WriteLine_5116("    }");
                }
            }
            this.WriteLine_5116("  }");
        }
        private WriteContextualGreenFactories(): void {
            var nodes = System.Linq.Enumerable.ToList(System.Linq.Enumerable.Where(this.Tree.Types,
                n => !(n instanceof PredefinedNode) && !(n instanceof AbstractNode)));
            this.WriteLine_1675();
            this.WriteLine_5116("  internal class ContextAwareSyntax");
            this.WriteLine_5116("  {");
            this.WriteLine_1675();
            this.WriteLine_5116("    private SyntaxFactoryContext context;");
            this.WriteLine_1675();
            this.WriteLine_1675();
            this.WriteLine_5116("    public ContextAwareSyntax(SyntaxFactoryContext context)");
            this.WriteLine_5116("    {");
            this.WriteLine_5116("        this.context = context;");
            this.WriteLine_5116("    }");
            this.WriteGreenFactories(nodes,/*withSyntaxFactoryContext:*/true);
            this.WriteLine_5116("  }");
        }
        private WriteStaticGreenFactories(): void {
            var nodes = System.Linq.Enumerable.ToList(System.Linq.Enumerable.Where(this.Tree.Types,
                n => !(n instanceof PredefinedNode) && !(n instanceof AbstractNode)));
            this.WriteLine_1675();
            this.WriteLine_5116("  internal static partial class SyntaxFactory");
            this.WriteLine_5116("  {");
            this.WriteGreenFactories(nodes);
            this.WriteGreenTypeList();
            this.WriteLine_5116("  }");
        }
        private WriteGreenFactories(nodes: System.Collections.Generic.List<TreeType>, withSyntaxFactoryContext: boolean = false): void {
            for (var i: number = 0, n = nodes.Count; i < n; i++) {
                var node = nodes.$get$(i);
                this.WriteGreenFactory(<Node>node, withSyntaxFactoryContext);
                if (i < n - 1)
                    this.WriteLine_1675();
            }
        }
        private WriteGreenTypeList(): void {
            this.WriteLine_1675();
            this.WriteLine_5116("    internal static IEnumerable<Type> GetNodeTypes()");
            this.WriteLine_5116("    {");
            this.WriteLine_5116("        return new Type[] {");
            var nodes = System.Linq.Enumerable.ToList(System.Linq.Enumerable.Where(this.Tree.Types,
                n => !(n instanceof PredefinedNode) && !(n instanceof AbstractNode)));
            for (var i: number = 0, n = nodes.Count; i < n; i++) {
                var node = nodes.$get$(i);
                this.Write_1709("           typeof({0})", node.Name);
                if (i < n - 1)
                    this.Write_1360(",");
                this.WriteLine_1675();
            }
            this.WriteLine_5116("        };");
            this.WriteLine_5116("    }");
        }
        private WriteGreenFactory(nd: Node, withSyntaxFactoryContext: boolean = false): void {
            var valueFields = System.Linq.Enumerable.ToList(System.Linq.Enumerable.Where(nd.Fields,
                n => !this.IsNodeOrNodeList(n.Type)));
            var nodeFields = System.Linq.Enumerable.ToList(System.Linq.Enumerable.Where(nd.Fields,
                n => this.IsNodeOrNodeList(n.Type)));
            var anyList: boolean = false;
            this.Write_1709("    public {0}{1} {2}(", withSyntaxFactoryContext ? "" : "static ", nd.Name, SourceWriter.StripPost(nd.Name, "Syntax"));
            if (nd.Kinds.Count > 1) {
                this.Write_1360("SyntaxKind kind, ");
            }
            for (var i: number = 0, n = nd.Fields.Count; i < n; i++) {
                var field = nd.Fields.$get$(i);
                if (i > 0)
                    this.Write_1360(", ");
                anyList = anyList || SourceWriter.IsAnyList(field.Type);
                var type = field.Type;
                if (type == "SyntaxNodeOrTokenList")
                    type = "SyntaxList<CSharpSyntaxNode>";
                this.Write_1709("{0} {1}", type, SourceWriter.CamelCase(field.Name));
            }
            this.WriteLine_5116(")");
            this.WriteLine_5116("    {");
            if (nd.Name != "SkippedTokensTriviaSyntax" && nd.Name != "DocumentationCommentTriviaSyntax" && nd.Name != "IncompleteMemberSyntax" && valueFields.Count + nodeFields.Count <= 3) {
                this.WriteLine_1675();
                this.WriteLine_5116("      int hash;");
                this.Write_1360("      var cached = SyntaxNodeCache.TryGetNode((int)");
                this.WriteCtorArgList(nd, withSyntaxFactoryContext, valueFields, nodeFields);
                this.WriteLine_5116(", out hash);");
                this.WriteLine_1126("      if (cached != null) return ({0})cached;", nd.Name);
                this.WriteLine_1675();
                this.Write_1709("      var result = new {0}(", nd.Name);
                this.WriteCtorArgList(nd, withSyntaxFactoryContext, valueFields, nodeFields);
                this.WriteLine_5116(");");
                this.WriteLine_5116("      if (hash >= 0)");
                this.WriteLine_5116("      {");
                this.WriteLine_5116("          SyntaxNodeCache.AddNode(result, hash);");
                this.WriteLine_5116("      }");
                this.WriteLine_1675();
                this.WriteLine_5116("      return result;");
            }
            else {
                this.WriteLine_1675();
                this.Write_1709("      return new {0}(", nd.Name);
                this.WriteCtorArgList(nd, withSyntaxFactoryContext, valueFields, nodeFields);
                this.WriteLine_5116(");");
            }
            this.WriteLine_5116("    }");
        }
        private WriteCtorArgList(nd: Node, withSyntaxFactoryContext: boolean, valueFields: System.Collections.Generic.List<Field>, nodeFields: System.Collections.Generic.List<Field>): void {
            if (nd.Kinds.Count == 1) {
                this.Write_1360("SyntaxKind.");
                this.Write_1360(nd.Kinds.$get$(0).Name);
            }
            else {
                this.Write_1360("kind");
            }
            for (var i: number = 0, n = nodeFields.Count; i < n; i++) {
                var field = nodeFields.$get$(i);
                this.Write_1360(", ");
                if (field.Type == "SyntaxList<SyntaxToken>" || SourceWriter.IsAnyList(field.Type)) {
                    this.Write_1709("{0}.Node", SourceWriter.CamelCase(field.Name));
                }
                else {
                    this.Write_1360(SourceWriter.CamelCase(field.Name));
                }
            }
            for (var i: number = 0, n = valueFields.Count; i < n; i++) {
                var field = valueFields.$get$(i);
                this.Write_1360(", ");
                this.Write_1360(SourceWriter.CamelCase(field.Name));
            }
            if (withSyntaxFactoryContext) {
                this.Write_1360(", this.context");
            }
        }
        private WriteRedTypes(): void {
            var nodes = System.Linq.Enumerable.ToList(System.Linq.Enumerable.Where(this.Tree.Types,
                n => !(n instanceof PredefinedNode)));
            for (var i: number = 0, n = nodes.Count; i < n; i++) {
                var node = nodes.$get$(i);
                this.WriteLine_1675();
                this.WriteRedType(node);
            }
        }
        private WriteRedType(node: TreeType): void {
            this.WriteComment_1861(node.TypeComment, "  ");
            if (node instanceof AbstractNode) {
                var nd: AbstractNode = <AbstractNode>node;
                this.WriteLine_1126("  public abstract partial class {0} : {1}", node.Name, node.Base);
                this.WriteLine_5116("  {");
                this.WriteLine_1126("    internal {0}(Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.CSharpSyntaxNode green, SyntaxNode parent, int position)", node.Name);
                this.WriteLine_5116("      : base(green, parent, position)");
                this.WriteLine_5116("    {");
                this.WriteLine_5116("    }");
                var valueFields = System.Linq.Enumerable.ToList(System.Linq.Enumerable.Where(nd.Fields,
                    n => !this.IsNodeOrNodeList(n.Type)));
                var nodeFields = System.Linq.Enumerable.ToList(System.Linq.Enumerable.Where(nd.Fields,
                    n => this.IsNodeOrNodeList(n.Type)));
                for (var i: number = 0, n = nodeFields.Count; i < n; i++) {
                    var field = nodeFields.$get$(i);
                    if (this.IsNodeOrNodeList(field.Type)) {
                        var fieldType = field.Type == "SyntaxList<SyntaxToken>" ? "SyntaxTokenList" : field.Type;
                        this.WriteLine_1675();
                        this.WriteComment_1861(field.PropertyComment, "    ");
                        this.WriteLine_1126("    public abstract {0}{1} {2} {{ get; }}",(SourceWriter.IsNew(field) ? "new " : ""), fieldType, field.Name);
                    }
                }
                for (var i: number = 0, n = valueFields.Count; i < n; i++) {
                    var field = valueFields.$get$(i);
                    this.WriteLine_1675();
                    this.WriteComment_1861(field.PropertyComment, "    ");
                    this.WriteLine_1126("    public abstract {0}{1} {2} {{ get; }}",(SourceWriter.IsNew(field) ? "new " : ""), field.Type, field.Name);
                }
                this.WriteLine_5116("  }");
            }
            else if (node instanceof Node) {
                var ndC: Node = <Node>node;
                this.WriteLine_1126("  public sealed partial class {0} : {1}", node.Name, node.Base);
                this.WriteLine_5116("  {");
                var valueFields = System.Linq.Enumerable.ToList(System.Linq.Enumerable.Where(ndC.Fields,
                    n => !this.IsNodeOrNodeList(n.Type)));
                var nodeFields = System.Linq.Enumerable.ToList(System.Linq.Enumerable.Where(ndC.Fields,
                    n => this.IsNodeOrNodeList(n.Type)));
                for (var i: number = 0, n = nodeFields.Count; i < n; i++) {
                    var field = nodeFields.$get$(i);
                    if (field.Type != "SyntaxToken" && field.Type != "SyntaxList<SyntaxToken>") {
                        if (SourceWriter.IsSeparatedNodeList(field.Type) || field.Type == "SyntaxNodeOrTokenList") {
                            this.WriteLine_1126("    private SyntaxNode {0};", SourceWriter.CamelCase(field.Name));
                        }
                        else {
                            var type = SourceWriter.GetFieldType(field);
                            this.WriteLine_1126("    private {0} {1};", type, SourceWriter.CamelCase(field.Name));
                        }
                    }
                }
                this.WriteLine_1675();
                this.WriteLine_1126("    internal {0}(Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.CSharpSyntaxNode green, SyntaxNode parent, int position)", node.Name);
                this.WriteLine_5116("        : base(green, parent, position)");
                this.WriteLine_5116("    {");
                this.WriteLine_5116("    }");
                this.WriteLine_1675();
                for (var i: number = 0, n = nodeFields.Count; i < n; i++) {
                    var field = nodeFields.$get$(i);
                    if (field.Type == "SyntaxToken") {
                        this.WriteComment_1861(field.PropertyComment, "    ");
                        this.WriteLine_1126("    public {0}{1} {2} ", SourceWriter.OverrideOrNewModifier(field), field.Type, field.Name);
                        this.WriteLine_5116("    {");
                        if (SourceWriter.IsOptional(field)) {
                            this.WriteLine_5116("        get");
                            this.WriteLine_5116("        {");
                            this.WriteLine_1126("            var slot = ((Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.{0})this.Green).{1};", node.Name, SourceWriter.CamelCase(field.Name));
                            this.WriteLine_5116("            if (slot != null)");
                            this.WriteLine_1126("                return new SyntaxToken(this, slot, {0}, {1});", this.GetChildPosition(i), this.GetChildIndex(i));
                            this.WriteLine_1675();
                            this.WriteLine_5116("            return default(SyntaxToken);");
                            this.WriteLine_5116("        }");
                        }
                        else {
                            this.WriteLine_1126("      get {{ return new SyntaxToken(this, ((Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.{0})this.Green).{1}, {2}, {3}); }}", node.Name, SourceWriter.CamelCase(field.Name), this.GetChildPosition(i), this.GetChildIndex(i));
                        }
                        this.WriteLine_5116("    }");
                    }
                    else if (field.Type == "SyntaxList<SyntaxToken>") {
                        this.WriteComment_1861(field.PropertyComment, "    ");
                        this.WriteLine_1126("    public {0}SyntaxTokenList {1} ", SourceWriter.OverrideOrNewModifier(field), field.Name);
                        this.WriteLine_5116("    {");
                        this.WriteLine_5116("        get");
                        this.WriteLine_5116("        {");
                        this.WriteLine_1126("            var slot = this.Green.GetSlot({0});", i);
                        this.WriteLine_5116("            if (slot != null)");
                        this.WriteLine_1126("                return new SyntaxTokenList(this, slot, {0}, {1});", this.GetChildPosition(i), this.GetChildIndex(i));
                        this.WriteLine_1675();
                        this.WriteLine_5116("            return default(SyntaxTokenList);");
                        this.WriteLine_5116("        }");
                        this.WriteLine_5116("    }");
                    }
                    else {
                        this.WriteComment_1861(field.PropertyComment, "    ");
                        this.WriteLine_1126("    public {0}{1} {2} ", SourceWriter.OverrideOrNewModifier(field), field.Type, field.Name);
                        this.WriteLine_5116("    {");
                        this.WriteLine_5116("        get");
                        this.WriteLine_5116("        {");
                        if (SourceWriter.IsNodeList(field.Type)) {
                            this.WriteLine_1126("            return new {0}(this.GetRed(ref this.{1}, {2}));", field.Type, SourceWriter.CamelCase(field.Name), i);
                        }
                        else if (SourceWriter.IsSeparatedNodeList(field.Type)) {
                            this.WriteLine_1126("            var red = this.GetRed(ref this.{0}, {1});", SourceWriter.CamelCase(field.Name), i);
                            this.WriteLine_1126("            if (red != null)", i);
                            this.WriteLine_1126("                return new {0}(red, {1});", field.Type, this.GetChildIndex(i));
                            this.WriteLine_1675();
                            this.WriteLine_1126("            return default({0});", field.Type);
                        }
                        else if (field.Type == "SyntaxNodeOrTokenList") {
                            throw new System.InvalidOperationException("field cannot be a random SyntaxNodeOrTokenList");
                        }
                        else {
                            if (i == 0) {
                                this.WriteLine_1126("            return this.GetRedAtZero(ref this.{0});", SourceWriter.CamelCase(field.Name));
                            }
                            else {
                                this.WriteLine_1126("            return this.GetRed(ref this.{0}, {1});", SourceWriter.CamelCase(field.Name), i);
                            }
                        }
                        this.WriteLine_5116("        }");
                        this.WriteLine_5116("    }");
                    }
                    this.WriteLine_1675();
                }
                for (var i: number = 0, n = valueFields.Count; i < n; i++) {
                    var field = valueFields.$get$(i);
                    this.WriteComment_1861(field.PropertyComment, "    ");
                    this.WriteLine_1126("    public {0}{1} {2} {{ get {{ return ((Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.{3})this.Green).{2}; }} }}",
                        SourceWriter.OverrideOrNewModifier(field), field.Type, field.Name, node.Name);
                    this.WriteLine_1675();
                }
                this.WriteLine_5116("    internal override SyntaxNode GetNodeSlot(int index)");
                this.WriteLine_5116("    {");
                this.WriteLine_5116("        switch (index)");
                this.WriteLine_5116("        {");
                for (var i: number = 0, n = nodeFields.Count; i < n; i++) {
                    var field = nodeFields.$get$(i);
                    if (field.Type != "SyntaxToken" && field.Type != "SyntaxList<SyntaxToken>") {
                        if (i == 0) {
                            this.WriteLine_1126("            case {0}: return this.GetRedAtZero(ref this.{1});", i, SourceWriter.CamelCase(field.Name));
                        }
                        else {
                            this.WriteLine_1126("            case {0}: return this.GetRed(ref this.{1}, {0});", i, SourceWriter.CamelCase(field.Name));
                        }
                    }
                }
                this.WriteLine_5116("            default: return null;");
                this.WriteLine_5116("        }");
                this.WriteLine_5116("    }");
                this.WriteLine_5116("    internal override SyntaxNode GetCachedSlot(int index)");
                this.WriteLine_5116("    {");
                this.WriteLine_5116("        switch (index)");
                this.WriteLine_5116("        {");
                for (var i: number = 0, n = nodeFields.Count; i < n; i++) {
                    var field = nodeFields.$get$(i);
                    if (field.Type != "SyntaxToken" && field.Type != "SyntaxList<SyntaxToken>") {
                        this.WriteLine_1126("            case {0}: return this.{1};", i, SourceWriter.CamelCase(field.Name));
                    }
                }
                this.WriteLine_5116("            default: return null;");
                this.WriteLine_5116("        }");
                this.WriteLine_5116("    }");
                this.WriteRedAcceptMethods(ndC);
                this.WriteRedUpdateMethod(ndC);
                this.WriteRedSetters(ndC);
                this.WriteRedListHelperMethods_1598(ndC);
                this.WriteLine_5116("  }");
            }
        }
        private GetChildPosition(i: number): string {
            if (i == 0) {
                return "this.Position";
            }
            else {
                return "this.GetChildPosition(" + i + ")";
            }
        }
        private GetChildIndex(i: number): string {
            if (i == 0) {
                return "0";
            }
            else {
                return "this.GetChildIndex(" + i + ")";
            }
        }
        private WriteRedAcceptMethods(node: Node): void {
            this.WriteRedAcceptMethod(node, false, true);
            this.WriteRedAcceptMethod(node, false, false);
        }
        private WriteRedAcceptMethod(node: Node, genericArgument: boolean, genericResult: boolean): void {
            var genericArgs: string = (genericResult && genericArgument) ? "<TArgument, TResult>" : genericResult ? "<TResult>" : "";
            var base = genericArgs == "" ? "Base" : "";
            this.WriteLine_1675();
            this.WriteLine_1126("    public override " + (genericResult ? "TResult" : "void") + " Accept" + genericArgs + "(CSharpSyntaxVisitor" + base + genericArgs + " visitor{0})", genericArgument ? ", TArgument argument" : "");
            this.WriteLine_5116("    {");
            this.WriteLine_1126("        " + (genericResult ? "return " : "") + "visitor.Visit{0}(this{1});", SourceWriter.StripPost(node.Name, "Syntax"), genericArgument ? ", argument" : "");
            this.WriteLine_5116("    }");
        }
        private WriteRedVisitors(): void {
            this.WriteRedVisitor(false, true);
            this.WriteRedVisitor(false, false);
        }
        private WriteRedVisitor(genericArgument: boolean, genericResult: boolean): void {
            var genericArgs: string = (genericResult && genericArgument) ? "<TArgument, TResult>" : genericResult ? "<TResult>" : "";
            var base = genericArgs == "" ? "Base" : "";
            var nodes = System.Linq.Enumerable.ToList(System.Linq.Enumerable.Where(this.Tree.Types,
                n => !(n instanceof PredefinedNode)));
            this.WriteLine_1675();
            this.WriteLine_5116("  public partial class CSharpSyntaxVisitor" + base + genericArgs);
            this.WriteLine_5116("  {");
            var nWritten: number = 0;
            for (var i: number = 0, n = nodes.Count; i < n; i++) {
                var node = __as__<Node>(nodes.$get$(i), Node);
                if (node != null) {
                    if (nWritten > 0)
                        this.WriteLine_1675();
                    nWritten++;
                    this.WriteComment_1399(System.String.Format("<summary>Called when the visitor visits a {0} node.</summary>", node.Name), "    ");
                    this.WriteLine_1126("    public virtual " + (genericResult ? "TResult" : "void") + " Visit{0}({1} node{2})", SourceWriter.StripPost(node.Name, "Syntax"), node.Name, genericArgument ? ", TArgument argument" : "");
                    this.WriteLine_5116("    {");
                    this.WriteLine_1126("      " + (genericResult ? "return " : "") + "this.DefaultVisit(node{0});", genericArgument ? ", argument" : "");
                    this.WriteLine_5116("    }");
                }
            }
            this.WriteLine_5116("  }");
        }
        private WriteRedUpdateMethod(node: Node): void {
            this.WriteLine_1675();
            this.Write_1709("    public {0} Update(", node.Name);
            for (var f: number = 0; f < node.Fields.Count; f++) {
                var field = node.Fields.$get$(f);
                if (f > 0)
                    this.Write_1360(", ");
                var type = field.Type == "SyntaxList<SyntaxToken>" ? "SyntaxTokenList" : field.Type;
                this.Write_1709("{0} {1}", type, SourceWriter.CamelCase(field.Name));
            }
            this.WriteLine_5116(")");
            this.WriteLine_5116("    {");
            this.Write_1360("        if (");
            var nCompared: number = 0;
            for (var f: number = 0; f < node.Fields.Count; f++) {
                var field = node.Fields.$get$(f);
                if (this.IsDerivedOrListOfDerived("SyntaxNode", field.Type) || this.IsDerivedOrListOfDerived("SyntaxToken", field.Type) || field.Type == "SyntaxNodeOrTokenList") {
                    if (nCompared > 0)
                        this.Write_1360(" || ");
                    this.Write_1709("{0} != this.{1}", SourceWriter.CamelCase(field.Name), field.Name);
                    nCompared++;
                }
            }
            if (nCompared > 0) {
                this.WriteLine_5116(")");
                this.WriteLine_5116("        {");
                this.Write_1709("            var newNode = SyntaxFactory.{0}(", SourceWriter.StripPost(node.Name, "Syntax"));
                if (node.Kinds.Count > 1) {
                    this.Write_1360("this.CSharpKind(), ");
                }
                for (var f: number = 0; f < node.Fields.Count; f++) {
                    var field = node.Fields.$get$(f);
                    if (f > 0)
                        this.Write_1360(", ");
                    this.Write_1360(SourceWriter.CamelCase(field.Name));
                }
                this.WriteLine_5116(");");
                this.WriteLine_5116("            var annotations = this.GetAnnotations();");
                this.WriteLine_5116("            if (annotations != null && annotations.Length > 0)");
                this.WriteLine_5116("               return newNode.WithAnnotations(annotations);");
                this.WriteLine_5116("            return newNode;");
                this.WriteLine_5116("        }");
            }
            this.WriteLine_1675();
            this.WriteLine_5116("        return this;");
            this.WriteLine_5116("    }");
        }
        private WriteRedWithMethod(node: Node): void {
            this.WriteLine_1675();
            this.Write_1709("    public {0} With(", node.Name);
            for (var f: number = 0; f < node.Fields.Count; f++) {
                var field = node.Fields.$get$(f);
                var type = this.GetRedPropertyType(field);
                this.Write_1709("Optional<{0}> {1} = default(Optional<{0}>)", type, SourceWriter.CamelCase(field.Name));
                if (f < node.Fields.Count - 1)
                    this.Write_1360(", ");
            }
            this.WriteLine_5116(")");
            this.WriteLine_5116("    {");
            this.Write_1360("        return this.Update(");
            for (var f: number = 0; f < node.Fields.Count; f++) {
                var field = node.Fields.$get$(f);
                var parameterName = SourceWriter.CamelCase(field.Name);
                this.WriteLine_1675();
                this.Write_1709("                    {0}.HasValue ? {0}.Value : this.{1}", parameterName, field.Name);
                if (f < node.Fields.Count - 1)
                    this.Write_1360(",");
            }
            this.WriteLine_1675();
            this.WriteLine_5116("                    );");
            this.WriteLine_5116("    }");
        }
        private WriteRedSetters(node: Node): void {
            for (var f: number = 0; f < node.Fields.Count; f++) {
                var field = node.Fields.$get$(f);
                var type = this.GetRedPropertyType(field);
                this.WriteLine_1675();
                this.WriteLine_1126("    public {0} With{1}({2} {3})", node.Name, SourceWriter.StripPost(field.Name, "Opt"), type, SourceWriter.CamelCase(field.Name));
                this.WriteLine_5116("    {");
                this.Write_1360("        return this.Update(");
                for (var f2: number = 0; f2 < node.Fields.Count; f2++) {
                    var field2 = node.Fields.$get$(f2);
                    if (f2 > 0)
                        this.Write_1360(", ");
                    if (field2 == field) {
                        this.Write_1709("{0}", SourceWriter.CamelCase(field2.Name));
                    }
                    else {
                        this.Write_1709("this.{0}", field2.Name);
                    }
                }
                this.WriteLine_5116(");");
                this.WriteLine_5116("    }");
            }
        }
        private WriteRedListHelperMethods_1598(node: Node): void {
            for (var f: number = 0; f < node.Fields.Count; f++) {
                var field = node.Fields.$get$(f);
                if (SourceWriter.IsAnyList(field.Type)) {
                    this.WriteRedListHelperMethods_1524(node, field);
                }
                else {
                    var referencedNode: Node = this.GetNode(field.Type);
                    if (referencedNode != null && (!SourceWriter.IsOptional(field) || this.RequiredFactoryArgumentCount(referencedNode) == 0)) {
                        for (var rf: number = 0; rf < referencedNode.Fields.Count; rf++) {
                            var referencedNodeField = referencedNode.Fields.$get$(rf);
                            if (SourceWriter.IsAnyList(referencedNodeField.Type)) {
                                this.WriteRedNestedListHelperMethods(node, field, referencedNode, referencedNodeField);
                            }
                        }
                    }
                }
            }
        }
        private WriteRedListHelperMethods_1524(node: Node, field: Field): void {
            var argType = SourceWriter.GetElementType(field.Type);
            this.WriteLine_1675();
            this.WriteLine_1126("    public {0} Add{1}(params {2}[] items)", node.Name, field.Name, argType);
            this.WriteLine_5116("    {");
            this.WriteLine_1126("        return this.With{0}(this.{1}.AddRange(items));", SourceWriter.StripPost(field.Name, "Opt"), field.Name);
            this.WriteLine_5116("    }");
        }
        private WriteRedNestedListHelperMethods(node: Node, field: Field, referencedNode: Node, referencedNodeField: Field): void {
            var argType = SourceWriter.GetElementType(referencedNodeField.Type);
            this.WriteLine_1675();
            this.WriteLine_1126("    public {0} Add{1}{2}(params {3}[] items)", node.Name, SourceWriter.StripPost(field.Name, "Opt"), referencedNodeField.Name, argType);
            this.WriteLine_5116("    {");
            if (SourceWriter.IsOptional(field)) {
                var factoryName = SourceWriter.StripPost(referencedNode.Name, "Syntax");
                var varName = SourceWriter.StripPost(SourceWriter.CamelCase(field.Name), "Opt");
                this.WriteLine_1126("        var {0} = this.{1} ?? SyntaxFactory.{2}();", varName, field.Name, factoryName);
                this.WriteLine_1126("        return this.With{0}({1}.With{2}({1}.{3}.AddRange(items)));", SourceWriter.StripPost(field.Name, "Opt"), varName, SourceWriter.StripPost(referencedNodeField.Name, "Opt"), referencedNodeField.Name);
            }
            else {
                this.WriteLine_1126("        return this.With{0}(this.{1}.With{2}(this.{1}.{3}.AddRange(items)));", SourceWriter.StripPost(field.Name, "Opt"), field.Name, SourceWriter.StripPost(referencedNodeField.Name, "Opt"), referencedNodeField.Name);
            }
            this.WriteLine_5116("    }");
        }
        private WriteRedRewriter(): void {
            var nodes = System.Linq.Enumerable.ToList(System.Linq.Enumerable.Where(this.Tree.Types,
                n => !(n instanceof PredefinedNode)));
            this.WriteLine_1675();
            this.WriteLine_5116("  public partial class CSharpSyntaxRewriter : CSharpSyntaxVisitor<SyntaxNode>");
            this.WriteLine_5116("  {");
            var nWritten: number = 0;
            for (var i: number = 0, n = nodes.Count; i < n; i++) {
                var node = __as__<Node>(nodes.$get$(i), Node);
                if (node != null) {
                    var nodeFields = System.Linq.Enumerable.ToList(System.Linq.Enumerable.Where(node.Fields,
                        nd => this.IsNodeOrNodeList(nd.Type)));
                    if (nWritten > 0)
                        this.WriteLine_1675();
                    nWritten++;
                    this.WriteLine_1126("    public override SyntaxNode Visit{0}({1} node)", SourceWriter.StripPost(node.Name, "Syntax"), node.Name);
                    this.WriteLine_5116("    {");
                    for (var f: number = 0; f < nodeFields.Count; f++) {
                        var field = nodeFields.$get$(f);
                        if (SourceWriter.IsAnyList(field.Type)) {
                            this.WriteLine_1126("      var {0} = this.VisitList(node.{1});", SourceWriter.CamelCase(field.Name), field.Name);
                        }
                        else if (field.Type == "SyntaxToken") {
                            this.WriteLine_1126("      var {0} = this.VisitToken(node.{1});", SourceWriter.CamelCase(field.Name), field.Name);
                        }
                        else {
                            this.WriteLine_1126("      var {0} = ({1})this.Visit(node.{2});", SourceWriter.CamelCase(field.Name), field.Type, field.Name);
                        }
                    }
                    if (nodeFields.Count > 0) {
                        this.Write_1360("      return node.Update(");
                        for (var f: number = 0; f < node.Fields.Count; f++) {
                            var field = node.Fields.$get$(f);
                            if (f > 0)
                                this.Write_1360(", ");
                            if (this.IsNodeOrNodeList(field.Type)) {
                                this.Write_1360(SourceWriter.CamelCase(field.Name));
                            }
                            else {
                                this.Write_1709("node.{0}", field.Name);
                            }
                        }
                        this.WriteLine_5116(");");
                    }
                    else {
                        this.WriteLine_5116("      return node;");
                    }
                    this.WriteLine_5116("    }");
                }
            }
            this.WriteLine_5116("  }");
        }
        private WriteRedFactories(): void {
            var nodes = System.Linq.Enumerable.ToList(
                System.Linq.Enumerable.OfType<CSharpSyntaxGenerator.Node>(System.Linq.Enumerable.Where(this.Tree.Types,
                    n => !(n instanceof PredefinedNode) && !(n instanceof AbstractNode)), CSharpSyntaxGenerator.Node));
            this.WriteLine_1675();
            this.WriteLine_5116("  public static partial class SyntaxFactory");
            this.WriteLine_5116("  {");
            for (var i: number = 0, n = nodes.Count; i < n; i++) {
                var node = nodes.$get$(i);
                this.WriteRedFactory(node);
                this.WriteRedFactoryWithNoAutoCreatableTokens(node);
                this.WriteRedMinimalFactory(node);
                this.WriteRedMinimalFactory(node,/*withStringNames:*/true);
                this.WriteKindConverters(node);
            }
            this.WriteLine_5116("  }");
        }
        protected CanBeAutoCreated(node: Node, field: Field): boolean {
            return this.IsAutoCreatableToken(node, field) || this.IsAutoCreateableNode(node, field);
        }
        private IsAutoCreatableToken(node: Node, field: Field): boolean {
            return field.Type == "SyntaxToken" && field.Kinds != null && ((field.Kinds.Count == 1 && field.Kinds.$get$(0).Name != "IdentifierToken" && !field.Kinds.$get$(0).Name.EndsWith("LiteralToken")) || (field.Kinds.Count > 1 && field.Kinds.Count == node.Kinds.Count));
        }
        private IsAutoCreateableNode(node: Node, field: Field): boolean {
            var referencedNode = this.GetNode(field.Type);
            return (referencedNode != null && this.RequiredFactoryArgumentCount(referencedNode) == 0);
        }
        private IsRequiredFactoryField(node: Node, field: Field): boolean {
            return (!SourceWriter.IsOptional(field) && !SourceWriter.IsAnyList(field.Type) && !this.CanBeAutoCreated(node, field)) || this.IsValueField(field);
        }
        private IsValueField(field: Field): boolean {
            return !this.IsNodeOrNodeList(field.Type);
        }
        private RequiredFactoryArgumentCount(nd: Node, includeKind: boolean = true): number {
            var count: number = 0;
            if (nd.Kinds.Count > 1 && includeKind) {
                count++;
            }
            for (var i: number = 0, n = nd.Fields.Count; i < n; i++) {
                var field = nd.Fields.$get$(i);
                if (this.IsRequiredFactoryField(nd, field)) {
                    count++;
                }
            }
            return count;
        }
        private OptionalFactoryArgumentCount(nd: Node): number {
            var count: number = 0;
            for (var i: number = 0, n = nd.Fields.Count; i < n; i++) {
                var field = nd.Fields.$get$(i);
                if (SourceWriter.IsOptional(field) || this.CanBeAutoCreated(nd, field) || SourceWriter.IsAnyList(field.Type)) {
                    count++;
                }
            }
            return count;
        }
        private WriteRedFactory(nd: Node): void {
            this.WriteLine_1675();
            var valueFields = System.Linq.Enumerable.ToList(System.Linq.Enumerable.Where(nd.Fields,
                n => this.IsValueField(n)));
            var nodeFields = System.Linq.Enumerable.ToList(System.Linq.Enumerable.Where(nd.Fields,
                n => !this.IsValueField(n)));
            this.WriteComment_1399(System.String.Format("<summary>Creates a new {0} instance.</summary>", nd.Name), "    ");
            this.Write_1709("    public static {0} {1}(", nd.Name, SourceWriter.StripPost(nd.Name, "Syntax"));
            if (nd.Kinds.Count > 1) {
                this.Write_1360("SyntaxKind kind, ");
            }
            for (var i: number = 0, n = nd.Fields.Count; i < n; i++) {
                var field = nd.Fields.$get$(i);
                if (i > 0)
                    this.Write_1360(", ");
                var type = this.GetRedPropertyType(field);
                this.Write_1709("{0} {1}", type, SourceWriter.CamelCase(field.Name));
            }
            this.WriteLine_5116(")");
            this.WriteLine_5116("    {");
            this.Write_1709("      return ({0})Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.SyntaxFactory.{1}(", nd.Name, SourceWriter.StripPost(nd.Name, "Syntax"));
            if (nd.Kinds.Count > 1) {
                this.Write_1360("kind, ");
            }
            for (var i: number = 0, n = nodeFields.Count; i < n; i++) {
                var field = nodeFields.$get$(i);
                if (i > 0)
                    this.Write_1360(", ");
                if (field.Type == "SyntaxToken") {
                    this.Write_1709("(Syntax.InternalSyntax.SyntaxToken){0}.Node", SourceWriter.CamelCase(field.Name));
                }
                else if (field.Type == "SyntaxList<SyntaxToken>") {
                    this.Write_1709("{0}.Node.ToGreenList<Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.CSharpSyntaxNode>()", SourceWriter.CamelCase(field.Name));
                }
                else if (SourceWriter.IsNodeList(field.Type)) {
                    this.Write_1709("{0}.Node.ToGreenList<Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.{1}>()", SourceWriter.CamelCase(field.Name), SourceWriter.GetElementType(field.Type));
                }
                else if (SourceWriter.IsSeparatedNodeList(field.Type)) {
                    this.Write_1709("{0}.Node.ToGreenSeparatedList<Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.{1}>()", SourceWriter.CamelCase(field.Name), SourceWriter.GetElementType(field.Type));
                }
                else if (field.Type == "SyntaxNodeOrTokenList") {
                    this.Write_1709("{0}.Node.ToGreenList<Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.CSharpSyntaxNode>()", SourceWriter.CamelCase(field.Name));
                }
                else {
                    this.Write_1709("{0} == null ? null : (Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.{1}){0}.Green", SourceWriter.CamelCase(field.Name), field.Type);
                }
            }
            for (var i: number = 0, n = valueFields.Count; i < n; i++) {
                var field = valueFields.$get$(i);
                this.Write_1360(", ");
                this.Write_1360(SourceWriter.CamelCase(field.Name));
            }
            this.WriteLine_5116(").CreateRed();");
            this.WriteLine_5116("    }");
        }
        private GetRedPropertyType(field: Field): string {
            if (field.Type == "SyntaxList<SyntaxToken>")
                return "SyntaxTokenList";
            return field.Type;
        }
        private GetDefaultValue(nd: Node, field: Field): string {
            System.Diagnostics.Debug.Assert(!this.IsRequiredFactoryField(nd, field));
            if (SourceWriter.IsOptional(field) || SourceWriter.IsAnyList(field.Type)) {
                return System.String.Format("default({0})", this.GetRedPropertyType(field));
            }
            else if (field.Type == "SyntaxToken") {
                if (field.Kinds.Count == 1) {
                    return System.String.Format("SyntaxFactory.Token(SyntaxKind.{0})", field.Kinds.$get$(0).Name);
                }
                else {
                    return System.String.Format("SyntaxFactory.Token(Get{0}{1}Kind(kind))", SourceWriter.StripPost(nd.Name, "Syntax"), SourceWriter.StripPost(field.Name, "Opt"));
                }
            }
            else {
                var referencedNode = this.GetNode(field.Type);
                return System.String.Format("SyntaxFactory.{0}()", SourceWriter.StripPost(referencedNode.Name, "Syntax"));
            }
        }
        private WriteKindConverters(nd: Node): void {
            for (var f: number = 0; f < nd.Fields.Count; f++) {
                var field = nd.Fields.$get$(f);
                if (field.Type == "SyntaxToken" && this.CanBeAutoCreated(nd, field) && field.Kinds.Count > 1) {
                    this.WriteLine_1675();
                    this.WriteLine_1126("    private static SyntaxKind Get{0}{1}Kind(SyntaxKind kind)", SourceWriter.StripPost(nd.Name, "Syntax"), SourceWriter.StripPost(field.Name, "Opt"));
                    this.WriteLine_5116("    {");
                    this.WriteLine_5116("      switch (kind)");
                    this.WriteLine_5116("      {");
                    for (var k: number = 0; k < field.Kinds.Count; k++) {
                        var nKind = nd.Kinds.$get$(k);
                        var pKind = field.Kinds.$get$(k);
                        this.WriteLine_1126("        case SyntaxKind.{0}:", nKind.Name);
                        this.WriteLine_1126("          return SyntaxKind.{0};", pKind.Name);
                    }
                    this.WriteLine_5116("        default:");
                    this.WriteLine_5116("          throw new ArgumentOutOfRangeException();");
                    this.WriteLine_5116("      }");
                    this.WriteLine_5116("    }");
                }
            }
        }
        private DetermineRedFactoryWithNoAutoCreatableTokenFields(nd: Node): System.Collections.Generic.IEnumerable<Field> {
            return System.Linq.Enumerable.Where(nd.Fields,
                f => !this.IsAutoCreatableToken(nd, f));
        }
        private WriteRedFactoryWithNoAutoCreatableTokens(nd: Node): void {
            var nAutoCreatableTokens = System.Linq.Enumerable.Count(nd.Fields,
                f => this.IsAutoCreatableToken(nd, f));
            if (nAutoCreatableTokens == 0)
                return
            var factoryWithNoAutoCreatableTokenFields = new System.Collections.Generic.HashSet<Field>(this.DetermineRedFactoryWithNoAutoCreatableTokenFields(nd));
            var minimalFactoryFields = this.DetermineMinimalFactoryFields(nd);
            if (minimalFactoryFields != null && factoryWithNoAutoCreatableTokenFields.SetEquals(minimalFactoryFields)) {
                return
            }
            this.WriteLine_1675();
            this.WriteComment_1399(System.String.Format("<summary>Creates a new {0} instance.</summary>", nd.Name), "    ");
            this.Write_1709("    public static {0} {1}(", nd.Name, SourceWriter.StripPost(nd.Name, "Syntax"));
            var hasPreviousParameter: boolean = false;
            if (nd.Kinds.Count > 1) {
                this.Write_1360("SyntaxKind kind");
                hasPreviousParameter = true;
            }
            for (var i: number = 0, n = nd.Fields.Count; i < n; i++) {
                var field = nd.Fields.$get$(i);
                if (factoryWithNoAutoCreatableTokenFields.Contains(field)) {
                    if (hasPreviousParameter)
                        this.Write_1360(", ");
                    this.Write_1709("{0} {1}", this.GetRedPropertyType(field), SourceWriter.CamelCase(field.Name));
                    hasPreviousParameter = true;
                }
            }
            this.WriteLine_5116(")");
            this.WriteLine_5116("    {");
            this.Write_1709("      return SyntaxFactory.{0}(", SourceWriter.StripPost(nd.Name, "Syntax"));
            var hasPreviousArgument: boolean = false;
            if (nd.Kinds.Count > 1) {
                this.Write_1360("kind");
                hasPreviousArgument = true;
            }
            for (var i: number = 0, n = nd.Fields.Count; i < n; i++) {
                var field = nd.Fields.$get$(i);
                if (hasPreviousArgument)
                    this.Write_1360(", ");
                if (factoryWithNoAutoCreatableTokenFields.Contains(field)) {
                    this.Write_1709("{0}", SourceWriter.CamelCase(field.Name));
                }
                else {
                    this.Write_1709("{0}", this.GetDefaultValue(nd, field));
                }
                hasPreviousArgument = true;
            }
            this.WriteLine_5116(");");
            this.WriteLine_5116("    }");
        }
        private DetermineMinimalOptionalField(nd: Node): Field {
            var listCount: number = System.Linq.Enumerable.Count(nd.Fields,
                f => SourceWriter.IsAnyNodeList(f.Type));
            if (listCount == 1) {
                return System.Linq.Enumerable.First(nd.Fields,
                    f => SourceWriter.IsAnyNodeList(f.Type));
            }
            else {
                var nodeCount: number = System.Linq.Enumerable.Count(nd.Fields,
                    f => this.IsNode(f.Type) && f.Type != "SyntaxToken");
                if (nodeCount == 1) {
                    return System.Linq.Enumerable.First(nd.Fields,
                        f => this.IsNode(f.Type) && f.Type != "SyntaxToken");
                }
                else {
                    return null;
                }
            }
        }
        private DetermineMinimalFactoryFields(nd: Node): System.Collections.Generic.IEnumerable<Field> {
            var allowOptionalField: Field = null;
            var optionalCount = this.OptionalFactoryArgumentCount(nd);
            if (optionalCount == 0) {
                return null;
            }
            var requiredCount = this.RequiredFactoryArgumentCount(nd,/*includeKind:*/false);
            if (requiredCount == 0 && optionalCount > 1) {
                allowOptionalField = this.DetermineMinimalOptionalField(nd);
            }
            return System.Linq.Enumerable.Where(nd.Fields,
                f => this.IsRequiredFactoryField(nd, f) || allowOptionalField == f);
        }
        private WriteRedMinimalFactory(nd: Node, withStringNames: boolean = false): void {
            var optionalCount = this.OptionalFactoryArgumentCount(nd);
            if (optionalCount == 0)
                return
            var minimalFactoryfields = new System.Collections.Generic.HashSet<Field>(this.DetermineMinimalFactoryFields(nd));
            if (withStringNames && System.Linq.Enumerable.Count(minimalFactoryfields,
                f => this.IsRequiredFactoryField(nd, f) && this.CanAutoConvertFromString(f)) == 0)
                return
            this.WriteLine_1675();
            this.WriteComment_1399(System.String.Format("<summary>Creates a new {0} instance.</summary>", nd.Name), "    ");
            this.Write_1709("    public static {0} {1}(", nd.Name, SourceWriter.StripPost(nd.Name, "Syntax"));
            var hasPreviousParameter: boolean = false;
            if (nd.Kinds.Count > 1) {
                this.Write_1360("SyntaxKind kind");
                hasPreviousParameter = true;
            }
            for (var i: number = 0, n = nd.Fields.Count; i < n; i++) {
                var field = nd.Fields.$get$(i);
                if (minimalFactoryfields.Contains(field)) {
                    var type = this.GetRedPropertyType(field);
                    if (this.IsRequiredFactoryField(nd, field)) {
                        if (hasPreviousParameter)
                            this.Write_1360(", ");
                        if (withStringNames && this.CanAutoConvertFromString(field)) {
                            type = "string";
                        }
                        this.Write_1709("{0} {1}", type, SourceWriter.CamelCase(field.Name));
                        hasPreviousParameter = true;
                    }
                    else {
                        if (hasPreviousParameter)
                            this.Write_1360(", ");
                        this.Write_1709("{0} {1} = default({0})", type, SourceWriter.CamelCase(field.Name));
                        hasPreviousParameter = true;
                    }
                }
            }
            this.WriteLine_5116(")");
            this.WriteLine_5116("    {");
            this.Write_1709("      return SyntaxFactory.{0}(", SourceWriter.StripPost(nd.Name, "Syntax"));
            var hasPreviousArgument: boolean = false;
            if (nd.Kinds.Count > 1) {
                this.Write_1360("kind");
                hasPreviousArgument = true;
            }
            for (var i: number = 0, n = nd.Fields.Count; i < n; i++) {
                var field = nd.Fields.$get$(i);
                if (hasPreviousArgument)
                    this.Write_1360(", ");
                if (minimalFactoryfields.Contains(field)) {
                    if (this.IsRequiredFactoryField(nd, field)) {
                        if (withStringNames && this.CanAutoConvertFromString(field)) {
                            this.Write_1709("{0}({1})", this.GetStringConverterMethod(field), SourceWriter.CamelCase(field.Name));
                        }
                        else {
                            this.Write_1709("{0}", SourceWriter.CamelCase(field.Name));
                        }
                    }
                    else {
                        if (SourceWriter.IsOptional(field) || SourceWriter.IsAnyList(field.Type)) {
                            this.Write_1709("{0}", SourceWriter.CamelCase(field.Name));
                        }
                        else {
                            this.Write_1709("{0} ?? {1}", SourceWriter.CamelCase(field.Name), this.GetDefaultValue(nd, field));
                        }
                    }
                }
                else {
                    var defaultValue = this.GetDefaultValue(nd, field);
                    this.Write_1360(defaultValue);
                }
                hasPreviousArgument = true;
            }
            this.WriteLine_5116(");");
            this.WriteLine_5116("    }");
        }
        private CanAutoConvertFromString(field: Field): boolean {
            return this.IsIdentifierToken(field) || this.IsIdentifierNameSyntax(field);
        }
        private IsIdentifierToken(field: Field): boolean {
            return field.Type == "SyntaxToken" && field.Kinds != null && field.Kinds.Count == 1 && field.Kinds.$get$(0).Name == "IdentifierToken";
        }
        private IsIdentifierNameSyntax(field: Field): boolean {
            return field.Type == "IdentifierNameSyntax";
        }
        private GetStringConverterMethod(field: Field): string {
            if (this.IsIdentifierToken(field)) {
                return "SyntaxFactory.Identifier";
            }
            else if (this.IsIdentifierNameSyntax(field)) {
                return "SyntaxFactory.IdentifierName";
            }
            else {
                throw new System.NotSupportedException();
            }
        }
        private WriteComment_1399(comment: string, indent: string): void {
            return
        }
        private WriteComment_1861(comment: Comment, indent: string): void {
            return
        }
        constructor() { super(); }
    }
}